// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UTEHY.DatabaseCoursePortal.Api.Data.EntityFrameworkCore;

#nullable disable

namespace UTEHY.DatabaseCoursePortal.Api.Data.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231216031910_EditTableBanner")]
    partial class EditTableBanner
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.AssignmentCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AssignmentCourses", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CtaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsBlank")
                        .HasColumnType("bit");

                    b.Property<string>("LinkTo")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banners", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alt = "Banner-1",
                            CtaTitle = "Học thử miễn phí",
                            Description = "Thực hành dự án với Figma, hàng trăm bài tập và thử thách, hướng dẫn 100% bởi Sơn Đặng, tặng kèm Flashcards, v.v.",
                            Expired = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/Banner/Banner-1.png",
                            IsBlank = true,
                            LinkTo = "https://fullstack.edu.vn/landing/htmlcss/",
                            Place = "Home",
                            Priority = 1,
                            Properties = "{\"props\":{\"style\":{\"--cta-hover-color\":\"#6828fa\",\"background\":\"linear-gradient(to right, #6828fa, #ffbaa4)\"}}}",
                            Title = "Học HTML CSS cho người mới",
                            Type = "SlideShow"
                        },
                        new
                        {
                            Id = 2,
                            Alt = "Banner-2",
                            CtaTitle = "Đăng ký ngay",
                            Description = "Khóa học ReactJS từ cơ bản tới nâng cao. Kết quả của khóa học này là bạn có thể làm hầu hết các dự án thường gặp với ReactJS.",
                            Expired = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/Banner/Banner-2.png",
                            IsBlank = true,
                            LinkTo = "https://fullstack.edu.vn/courses/reactjs?ref=banner",
                            Place = "Home",
                            Priority = 2,
                            Properties = "{\"props\":{\"style\":{\"--cta-hover-color\":\"#2877FA\",\"background\":\"linear-gradient(to right, #2877FA, #6717CD)\"}}}",
                            Title = "Học ReactJS Miễn Phí!",
                            Type = "SlideShow"
                        },
                        new
                        {
                            Id = 3,
                            Alt = "Banner-3",
                            CtaTitle = "Xem thành quả",
                            Description = "Để đạt được kết quả tốt trong mọi việc ta cần xác định mục tiêu rõ ràng cho việc đó. Học lập trình cũng không là ngoại lệ.",
                            Expired = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/Banner/Banner-3.png",
                            IsBlank = true,
                            LinkTo = "https://fullstack.edu.vn/blog/tong-hop-cac-san-pham-cua-hoc-vien-tai-f8.html",
                            Place = "Home",
                            Priority = 3,
                            Properties = "{\"props\":{\"style\":{\"--cta-hover-color\":\"#7612ff\",\"background\":\"linear-gradient(to right, #7612ff, #05b2ff)\"}}}",
                            Title = "Thành Quả của Học Viên",
                            Type = "SlideShow"
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BlogTopicId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBookmark")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PulishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.BlogTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BlogTopics", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReacted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVoted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("TypeCommentable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VideoCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("VotersCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            CommentsCount = 1,
                            Content = "Học đi nào SGP",
                            IsAnswered = true,
                            IsApproved = true,
                            IsReacted = true,
                            IsRemoved = false,
                            IsVoted = false,
                            PostId = 1,
                            TypeCommentable = "",
                            VideoCourseId = 1,
                            VotersCount = 1
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 1,
                            CommentsCount = 1,
                            Content = "Học đi nào VGM",
                            IsAnswered = true,
                            IsApproved = true,
                            IsReacted = true,
                            IsRemoved = false,
                            IsVoted = false,
                            ParentCommentId = 1,
                            PostId = 1,
                            TypeCommentable = "",
                            VideoCourseId = 1,
                            VotersCount = 1
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 1,
                            CommentsCount = 1,
                            Content = "Học đi nào GGL",
                            IsAnswered = true,
                            IsApproved = true,
                            IsReacted = true,
                            IsRemoved = false,
                            IsVoted = false,
                            ParentCommentId = 1,
                            PostId = 2,
                            TypeCommentable = "",
                            VideoCourseId = 1,
                            VotersCount = 1
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 1,
                            CommentsCount = 1,
                            Content = "Học đi nào FL",
                            IsAnswered = true,
                            IsApproved = true,
                            IsReacted = true,
                            IsRemoved = false,
                            IsVoted = false,
                            PostId = 3,
                            TypeCommentable = "",
                            VideoCourseId = 1,
                            VotersCount = 1
                        },
                        new
                        {
                            Id = 5,
                            BlogId = 1,
                            CommentsCount = 1,
                            Content = "Học đi nào TLN",
                            IsAnswered = true,
                            IsApproved = true,
                            IsReacted = true,
                            IsRemoved = false,
                            IsVoted = false,
                            ParentCommentId = 1,
                            PostId = 1,
                            TypeCommentable = "",
                            VideoCourseId = 1,
                            VotersCount = 1
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Config", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Configs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Số lượng khoá học hiển thị tối đa tại trang chủ",
                            Key = "MaxCourseHome",
                            Value = "20"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Số lượng banner hiển thị tối đa tại trang chủ",
                            Key = "MaxBannerHome",
                            Value = "10"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Số lượng trang tính năng hiển thị tối đa tại trang chủ",
                            Key = "MaxPageFeatureHome",
                            Value = "10"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Số lượng bài viết hiển thị tối đa tại trang chủ",
                            Key = "MaxPostHome",
                            Value = "10"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Id kênh youtube hệ thống",
                            Key = "IdChannelYoutube",
                            Value = "UCVy9p7eBCMmHVEITk4yPZjg"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Số lượng video youtube hiển thị tối đa tại trang chủ",
                            Key = "MaxVideoYoutubeHome",
                            Value = "10"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Số người dùng đã tạo",
                            Key = "UserCreationCount",
                            Value = "0"
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Course", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("CertificateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("LandingPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/Course/Course-1.png",
                            IsPublished = true,
                            Priority = 1,
                            PublishedAt = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kiến Thức Nhập Môn IT"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/Course/Course-2.png",
                            IsPublished = true,
                            Priority = 1,
                            PublishedAt = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "HTML CSS từ Zero đến Hero"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/Course/Course-3.png",
                            IsPublished = true,
                            Priority = 1,
                            PublishedAt = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Responsive Với Grid System"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/Course/Course-4.png",
                            IsPublished = true,
                            Priority = 1,
                            PublishedAt = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Lập Trình JavaScript Cơ Bản"
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Page", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Công cụ sơ đồ ER để trực quan hóa cách các thực thể hệ thống như người hoặc đối tượng liên quan với nhau.",
                            Image = "/Page/Page-1.png",
                            Priority = 4,
                            Status = true,
                            Title = "Vẽ sơ đồ ER",
                            Type = "Feature"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Tổng hợp câu hỏi trắc nghiệm CSDL có đáp án đầy đủ nhằm giúp các bạn dễ dàng ôn tập lại toàn bộ các kiến thức.",
                            Image = "/Page/Page-2.png",
                            Priority = 3,
                            Status = true,
                            Title = "Bộ câu hỏi trắc nghiệm về CSDL",
                            Type = "Feature"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Trình biên dịch SQL trực tuyến ngay trên nền tảng web, không cần phải cài đặt trên máy tính cá nhân.",
                            Image = "/Page/Page-3.png",
                            Priority = 2,
                            Status = true,
                            Title = "Thực thi SQL",
                            Type = "Feature"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Nơi người dùng có thể tương tác, chia sẻ kiến thức, và giải quyết thắc mắc về CSDL.",
                            Image = "/Page/Page-4.png",
                            Priority = 1,
                            Status = true,
                            Title = "Thảo luận và diễn dàn",
                            Type = "Feature"
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentPermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentPermissionId");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Post", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "",
                            Description = "Authentication và Authorization là một phần quan trọng trong việc phát triển phần mềm, giúp chúng ta xác thực và phân quyền...",
                            Image = "/Post/Post-1.png",
                            IsPublished = true,
                            Priority = 0,
                            Title = "Authentication & Authorization trong ReactJS",
                            UserId = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192")
                        },
                        new
                        {
                            Id = 2,
                            Content = "",
                            Description = "Chào bạn! Nếu bạn đã là học viên khóa Pro của F8, chắc hẳn bạn đã biết tới \"Dev Mode\" - giúp thực hành code song song khi xem...",
                            Image = "/Post/Post-2.png",
                            IsPublished = true,
                            Priority = 0,
                            Title = "Hướng dẫn chi tiết cách sử dụng Dev Mode trong khóa Pro",
                            UserId = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192")
                        },
                        new
                        {
                            Id = 3,
                            Content = "",
                            Description = "Hello ae mọi người nhé, mọi người (đặc biệt là lập trình viên Software) chắc hẳn đã nghe tới Powershell, nhưng bù lại cái màn hình...",
                            Image = "/Post/Post-3.png",
                            IsPublished = true,
                            Priority = 0,
                            Title = "Cách chỉnh theme Oh-my-posh cho Powershell",
                            UserId = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192")
                        },
                        new
                        {
                            Id = 4,
                            Content = "",
                            Description = "Ở bài viết này, chúng ta cùng nhau tìm hiểu về các vấn đề liên quan đến Performance ở phía FE. Không dài dòng nữa,...",
                            Image = "/Post/Post-4.png",
                            IsPublished = true,
                            Priority = 0,
                            Title = "Sự khác biệt giữa var, let và const trong JavaScript",
                            UserId = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192")
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentQuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.QuizCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AssignmentCourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("QuizCourses", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeReactable")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reaction");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "d509871c-6151-4dad-abfe-8d15fefc0440",
                            Description = "Admin Role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3"),
                            ConcurrencyStamp = "56a0f80d-2189-425e-a4b0-1b4fb1d4717a",
                            Description = "Student Role",
                            Name = "student",
                            NormalizedName = "student"
                        },
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dd"),
                            ConcurrencyStamp = "9cae13e5-f9b3-4d13-b62d-78402a7e065e",
                            Description = "Teacher Role",
                            Name = "teacher",
                            NormalizedName = "teacher"
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PermessionId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermessionId");

                    b.HasIndex("RoleId", "PermessionId")
                        .IsUnique();

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.StepTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AssignmentCourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("TrackID")
                        .HasColumnType("int");

                    b.Property<int>("TypeStepTrackId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VideoCourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StepTracks", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Student", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StudentId = "10121910",
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a7")
                        },
                        new
                        {
                            Id = 2,
                            StudentId = "10121911",
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a2")
                        },
                        new
                        {
                            Id = 3,
                            StudentId = "10121912",
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08b2")
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Teacher", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TeacherId = "12520001",
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a6")
                        },
                        new
                        {
                            Id = 2,
                            TeacherId = "12520002",
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a1")
                        },
                        new
                        {
                            Id = 3,
                            TeacherId = "12520003",
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08b1")
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Tracks", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.TypeStepTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeStepTrackName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TypeStepTracks", (string)null);
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "0c801dd3-d747-4edd-be0e-5d33ee452126",
                            Email = "luyenhaidangit@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Luyện Hải Đăng",
                            NormalizedEmail = "luyenhaidangit@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEB0jLLhs3/qqnTmtLH5rvL7HvsDvSJx8UuiXsWm07TYO1TN7qWq31fsP2G0fH4uyLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "3131c347-701e-4ded-a7c0-b766d41ca0fa",
                            Email = "caovandan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Cao Văn Dân",
                            NormalizedEmail = "caovandan@gmail.com",
                            NormalizedUserName = "caovandan",
                            PasswordHash = "AQAAAAEAACcQAAAAEHexpTEGR6AQRgPfoFRR6wnAkBkzmXM06wicBpuTUwq7QiJ+TaUyIjpXA+q9P1K62A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "caovandan"
                        },
                        new
                        {
                            Id = new Guid("1a3e854a-843d-4e65-ab88-9d5736c831f2"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "1dc9c3d4-287f-422f-9cac-14bf23f7d9cb",
                            Email = "nguyenvanthang@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Nguyễn Văn Thắng",
                            NormalizedEmail = "nguyenvanthang@gmail.com",
                            NormalizedUserName = "nguyenvanthang",
                            PasswordHash = "AQAAAAEAACcQAAAAELaO7+d4S/05NncBxmMGFY3qx07xsycXoVneJx3+4Vokip1p5QU6fAUYE6KWvdRD9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "nguyenvanthang"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a6"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "99c84b7c-d6fe-4e49-8943-78d15a91c86c",
                            Email = "phamxuantuyen@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Phạm Xuân Tuyển",
                            NormalizedEmail = "phamxuantuyen@gmail.com",
                            NormalizedUserName = "phamxuantuyen",
                            PasswordHash = "AQAAAAEAACcQAAAAENWArH8pgo4x5Wv9AhRKmx5ALtf3HADrUPO2wxssSPiIu2ITWkidnYDNEJMedVcRGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "phamxuantuyen"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a1"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "a5ef1661-ebed-471c-8dcb-d9aabc99dad1",
                            Email = "daoxuanduc@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Đào Xuân Đức",
                            NormalizedEmail = "daoxuanduc@gmail.com",
                            NormalizedUserName = "daoxuanduc",
                            PasswordHash = "AQAAAAEAACcQAAAAEB+72wESlaqBqBc2DN+xAdCu7NooLxP71AT7ycf/JDshY17VyAUJw/BY5UxIeE8Ohg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "daoxuanduc"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08b1"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "262eaf50-7ef8-4654-8048-c2844d2ea494",
                            Email = "hoanggiabao@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Hoàng Gia Bảo",
                            NormalizedEmail = "hoanggiabao@gmail.com",
                            NormalizedUserName = "hoanggiabao",
                            PasswordHash = "AQAAAAEAACcQAAAAEBoD+nd3UXtkeack64ROcBjc50Yp4Nb4muPLL14kscb9iLJkdZXz+erE9Tje94aW/Q==",
                            PhoneNumber = "+84922002360",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "hoanggiabao"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a7"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "bf4b21dc-842a-430f-bb0e-6311a3175d57",
                            Email = "buixuanhoang@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Bùi Xuân Hoàng",
                            NormalizedEmail = "buixuanhoang@gmail.com",
                            NormalizedUserName = "buixuanhoang",
                            PasswordHash = "AQAAAAEAACcQAAAAEJIPyi6EB4KU8X+mLuMbRQES/df3kNmzkRzpy/bhqfWXu/VK7L5NHG45E3Ni+TNGPA==",
                            PhoneNumber = "+84922002111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "buixuanhoang"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a2"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "e0bcd2e3-0146-4ecd-9d15-d7968eb70ad1",
                            Email = "phamthanhlong@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Phạm Thanh Long",
                            NormalizedEmail = "phamthanhlong@gmail.com",
                            NormalizedUserName = "phamthanhlong",
                            PasswordHash = "AQAAAAEAACcQAAAAELIZS6lE6zLMUp41TsHKsAIvFqz6rbENLDRIaCg+z8Y+DS/hk0QZhmspGytNrdjbDQ==",
                            PhoneNumber = "+84922002222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "phamthanhlong"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08b2"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "15009c39-59c6-4703-83b4-4e007bfb08f0",
                            Email = "nguyendinhhung@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Nguyễn Đình Hùng",
                            NormalizedEmail = "nguyendinhhung@gmail.com",
                            NormalizedUserName = "nguyendinhhung",
                            PasswordHash = "AQAAAAEAACcQAAAAEAFcEITznjiROBYbPUGwZ2U+JAH3dZB+4wsbGGTERhIeXUfyOafopFwbxzVEs3qoTA==",
                            PhoneNumber = "+84922002333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "nguyendinhhung"
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.UserCourse", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("Progress")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeSpent")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Progress = 50,
                            RegistrationDate = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TimeSpent = 50,
                            UserId = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192")
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Progress = 50,
                            RegistrationDate = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TimeSpent = 50,
                            UserId = new Guid("1a3e854a-843d-4e65-ab88-9d5736c831f2")
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            Progress = 50,
                            RegistrationDate = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TimeSpent = 50,
                            UserId = new Guid("1a3e854a-843d-4e65-ab88-9d5736c831f2")
                        });
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.VideoCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VideoCourses");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192"),
                            RoleId = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3")
                        },
                        new
                        {
                            UserId = new Guid("1a3e854a-843d-4e65-ab88-9d5736c831f2"),
                            RoleId = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3")
                        },
                        new
                        {
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a6"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dd")
                        },
                        new
                        {
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a1"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dd")
                        },
                        new
                        {
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08b1"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dd")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Blog", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", null)
                        .WithMany("Blogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Comment", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Permission", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Permission", "ParentPermission")
                        .WithMany()
                        .HasForeignKey("ParentPermissionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentPermission");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Post", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Question", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.QuestionCategory", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Reaction", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", null)
                        .WithMany("Reactions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Student", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Teacher", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.UserCourse", b =>
                {
                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Course", b =>
                {
                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("UTEHY.DatabaseCoursePortal.Api.Data.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Reactions");

                    b.Navigation("UserCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
